<script>
let socket;
let userId = "12345";   // z.B. aus JWT oder Session
let userName = "Max";   // optional
let reconnectInterval = 2000;

// Verbindung aufbauen
function connectWebSocket() {
    socket = new WebSocket("ws://localhost:8080");

    socket.onopen = () => {
        console.log("üîó Connected to WS");
        reconnectInterval = 2000;

        // User join
        socket.send(JSON.stringify({ type: 'join', id: userId, name: userName }));
    };

    socket.onmessage = (event) => {
        const data = JSON.parse(event.data);

        if (data.type === "updateUsers") {
            renderUsers(data.users);
        }
    };

    socket.onclose = () => {
        console.log(`‚ùå Disconnected. Reconnecting in ${reconnectInterval}ms...`);
        setTimeout(connectWebSocket, reconnectInterval);

        // Exponentielles Backoff
        reconnectInterval = Math.min(reconnectInterval * 2, 30000);
    };

    socket.onerror = (err) => {
        console.error("WS Error:", err);
        socket.close();
    };
}

// Starten
connectWebSocket();

// User-Liste rendern
function renderUsers(users) {
    const list = document.getElementById("userList");
    list.innerHTML = "";
    users.forEach(u => {
        const li = document.createElement("li");
        li.textContent = `${u.name} - Termine: ${u.termine}`;
        list.appendChild(li);
    });
}

// Neuen Termin senden
function addTermin() {
    if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({ type: 'newTermin', id: userId }));
    } else {
        console.warn("Socket nicht verbunden");
    }
}

// Tab schlie√üen / Logout
window.addEventListener("beforeunload", () => {
    if (socket.readyState === WebSocket.OPEN) {
        socket.close(1000, "User leaves");
    }
});
</script>

<ul id="userList"></ul>
<button onclick="addTermin()">Neuen Termin hinzuf√ºgen</button>
